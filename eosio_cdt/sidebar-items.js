initSidebarItems({"fn":[["active_producers","Gets the top 21 producers"],["check","Aborts processing of this action and unwinds all pending changes if the test condition is true"],["check_code","Aborts processing of this action and unwinds all pending changes if the test condition is true"],["creation_time","Returns the creation time of an account"],["current_receiver","Get the current receiver of the action."],["current_time","Gets the current time"],["eosio_exit","This method will abort execution of wasm without failing the contract. This is used to bypass all cleanup / destructors that would normally be called."],["expiration","Gets the expiration time"],["get_resource_limits","Priviledged"],["has_auth","Verifies that `name` name has auth."],["is_account","Verifies that `name` is an account."],["is_privileged","Check if an account is privileged"],["permission_last_used","Returns the last used time of a permission"],["publication","Gets the publication time"],["require_auth","Verifies that `name` exists in the set of provided auths on a action. Throws if not found."],["require_permission","Verifies that `name` exists in the set of provided auths on a action. Throws if not found."],["require_recipient","Add the specified account to set of accounts to be notified"],["send_inline_action",""]],"struct":[["DeferredId",""],["PrimaryTableCursor",""],["PrimaryTableIndex",""],["PrimaryTableIterator",""],["SecondaryTableCursor",""],["SecondaryTableIndex",""],["SecondaryTableIterator",""],["SecondaryTableName",""]],"trait":[["ActionFn",""],["Check",""],["Print",""],["SecondaryTableKey",""],["TableCursor","Table Cursor"],["TableIndex","Table index"],["TableIterator","Table iterator"],["TableRow",""]]});